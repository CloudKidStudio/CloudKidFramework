import {ApplicationPlugin} from '@springroll/core';
import Debug from '../Debug';

(function() {
    
    const plugin = new ApplicationPlugin('framerate', ['ticker']);

    // Init the animator
    plugin.setup = function() {

        /**
         * The framerate container
         * ### module: @springroll/debug
         * @member {DOMElement} _framerate
         * @memberof springroll.Application#
         * @private
         */
        this._framerate = null;

        // Handle frame updates
        this.on('update', onUpdate, this);
        this.on('resumed', onResume);
    };

    // Definitely have the displayElement by now
    plugin.preload = function(done) {

        let framerate = document.getElementById(Debug.FRAMERATE_ID);

        // Element does not exist, add it to the display (or body)
        // automatically.
        if (!framerate) {

            framerate = document.createElement('div');
            framerate.id = Debug.FRAMERATE_ID;
            framerate.dataset.autogenerated = true;

            // Insert framerate display and set the default text
            const parent = this.displayElement || document.body;
            parent.appendChild(framerate);
        }

        // Set the default text
        framerate.innerHTML = 'FPS: 00.000';
        this._framerate = framerate;

        done();
    };

    // varables for calculating the framerate
    let frameCount = 0;
    let framerateTimer = 0;

    function onUpdate(elapsed) {
        frameCount++;
        framerateTimer += elapsed;

        // Only update the framerate every second
        if (framerateTimer >= 1000) {
            let fps = 1000 / framerateTimer * frameCount;
            this._framerate.innerHTML = `FPS: ${fps.toFixed(3)}`;
            framerateTimer = 0;
            frameCount = 0;
        }
    }

    // On resumed application
    // reset the temp variables to not take the framerate display
    function onResume() {
        frameCount = framerateTimer = 0;
    }

    // Destroy the animator
    plugin.teardown = function() {
        this.off('update', onUpdate, this);
        this.off('resumed', onResume);

        const framerate = this._framerate;

        // Remove the framerate container if we created it
        if (framerate.dataset.autogenerated) {
            framerate.parentNode.removeChild(framerate);
        }
        this._framerate = null;
    };

}());